////    Enviromment setup:

    >>  python -m venv env
    >>  . env/Scripts/activate

    ====  Folder_structure:
            Root:
                src:
                    config:
                        config.py

                    api:
                        routes:
                            user.py
                            orders.py
                            example.py
                        handlers.py

                    models:
                        models.py
                        schemas.py
                env:
                    .env
                    requirements.txt

                scripts:
                    db_init.py
                    app_init.py
                    db_clean.py (ONLY FOR TESTING!!!)
            
            index.py
            readme
            .gitignore

    ====    Stack:
    >>  pip install -r requirements.txt

    ===> FastAPI [standard]
    ===> SQLAclhemy
    ===> asyncpg
    ===> pydantic
    ===> dotenv
    ===> asyncio
    ===> uvicorn 

    ====  .env

    ===> DB_HOST=****
    ===> DB_PORT=****
    ===> DB_USER=****
    ===> DB_PASS=****
    ===> DB_NAME=****

    ====    config.py

    ===> Class Settnigs:
            def db_url():
                return url

//// Development


1 > app_init.py

    def App_init():

       app = FastAPI()
    
        app.add_middleware
        (
            CORSMiddleware,
            allow_origins = ['*'],   
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )

        return app 

2 > db.py

    engine = create_async_engine(
        url = settings.db_url()
    )

    class Base(DeclarativeBase):
        pass

3 > models.py

    class model(Base):
        __table__ = "table_name"

        id : Mapped[int] = mapped_column(primary_key = True)
        value : Mapped[str] = mapped_column(nullable = False)
????    foreign_key : Mapped[int] = mapped_column(foreign_key = True)

4 > schemas.py

    class post_schema(BaseModel):
        value : str

    class get_schema(post_schema):
        id : int

5 > api/user.py

    class user_handlers:

        @staticmethod
        async def get():
            async with async_session as session:
                result = await session.get(get_schema)
                return result    

        @staticmethod
        async def post(value):
            id = none
            async with async_session as session:
                new = model(value = value)
                result = await session.add(new)
                await session.flush()
                id = new.id
                await session.commit()
            return id

        @staticmethod
        async def update(id, value):
            async with async_session() as session:
                obj = await session.get(model, id)
                obj.value = value
                await session.commit()
            return {"ok": True}

        @staticmethod
        async def delete(id):
            async with async_session() as session:
                obj = await session.get(model, id)
                if obj:
                    await session.delete(obj)
                    await session.commit()
                    return {"ok": True}
                return {"ok": False}


6 > handlers.py

    class API:

        user_handlers = user_handlers()

        orders_handlers = orders_handlers()

        example_handlers = example_handlers() 

7 > db_init.py

    async def db_init():
        try:
            async with engine.begin() as conn:

                await conn.run_sync(Base.metadata.drop_all)
                await conn.run_sync(Base.metadata.create_all)

                print("База данных успешно инициализирована")

        except Exception as e:

            print(f"Ошибка при инициализации БД: {e}")

        finally:

            await engine.dispose()

    asyncio.run(db_init())

8 > index.py

    # DB Interface Object
    CRUD = CRUD()

    #FastAPI Interface
    app = App_init()

    #API
    @app.get("/get")
    def get():
    try:
        CRUD.get()
    except Exception as e:
        print(f"e")


    @app.post("/post")
    def post():
    try:
        CRUD.post()
    except Exception as e:
        print(f"e")

    @app.put("/update")
    def update():
    try:
        CRUD.update()
    except Exception as e:
        print(f"e")

    @app.delete("/delete")
    def delete():
    try:
        CRUD.delete()
    except Exception as e:
        print(f"e")
    